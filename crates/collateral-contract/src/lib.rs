use std::collections::HashMap;

use alloy::rpc::types::Filter;
use alloy::signers::{local::PrivateKeySigner, Signer};
use alloy_primitives::{Address, FixedBytes, U256};
use alloy_provider::{Provider, ProviderBuilder};
use alloy_sol_types::{sol, SolEvent};
pub mod config;
pub mod proxy;
use tracing::info;
pub use CollateralUpgradeable::{Deposit, Reclaimed, Slashed};

#[cfg(test)]
mod tests;

use config::{CHAIN_ID, MAX_BLOCKS_PER_SCAN, PROXY_ADDRESS, RPC_URL};

sol!(
    #[allow(missing_docs)]
    #[sol(
        rpc,
        bytecode = "60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f5ffd5b5061005161005660201b60201c565b6101d1565b5f61006561015460201b60201c565b9050805f0160089054906101000a900460ff16156100af576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101515767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161014891906101b8565b60405180910390a15b50565b5f5f61016461016d60201b60201c565b90508091505090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005f1b905090565b5f67ffffffffffffffff82169050919050565b6101b281610196565b82525050565b5f6020820190506101cb5f8301846101a9565b92915050565b608051613ab76101f75f395f81816123e70152818161243c01526126d50152613ab75ff3fe6080604052600436106101ba575f3560e01c8063679fcc21116100eb578063ad3cb1cc11610089578063dac0ed0111610063578063dac0ed0114610643578063e00f7b811461067f578063e7ba0ceb146106a7578063f72c0d8b146106cf576101f1565b8063ad3cb1cc146105c9578063b4314e2b146105f3578063d547741f1461061b576101f1565b806396c42a0a116100c557806396c42a0a1461050d5780639b0b27a9146105375780639cf963181461055f578063a217fddf1461059f576101f1565b8063679fcc211461046b578063881cf23b146104a757806391d14854146104d1576101f1565b806336568abe116101585780634f1ef286116101325780634f1ef286146103e1578063501e4e91146103fd57806352d1902d146104195780635cfb298c14610443576101f1565b806336568abe1461036757806341e9d79d1461038f5780634a7393b2146103b7576101f1565b80630d8e6e2c116101945780630d8e6e2c146102b1578063248a9ca3146102db5780632497d31f146103175780632f2ff15d1461033f576101f1565b806301ffc9a71461022357806306016f711461025f57806307d8678814610289576101f1565b366101f1576040517f84ee6c0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f84ee6c0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561022e575f5ffd5b5061024960048036038101906102449190612be2565b6106f9565b6040516102569190612c27565b60405180910390f35b34801561026a575f5ffd5b50610273610772565b6040516102809190612c5c565b60405180910390f35b348015610294575f5ffd5b506102af60048036038101906102aa9190612ca8565b610784565b005b3480156102bc575f5ffd5b506102c5610baf565b6040516102d29190612ce2565b60405180910390f35b3480156102e6575f5ffd5b5061030160048036038101906102fc9190612d2e565b610bb7565b60405161030e9190612d68565b60405180910390f35b348015610322575f5ffd5b5061033d60048036038101906103389190612e37565b610be1565b005b34801561034a575f5ffd5b5061036560048036038101906103609190612f15565b610f34565b005b348015610372575f5ffd5b5061038d60048036038101906103889190612f15565b610f56565b005b34801561039a575f5ffd5b506103b560048036038101906103b09190612f90565b610fd1565b005b3480156103c2575f5ffd5b506103cb6110a8565b6040516103d89190612ce2565b60405180910390f35b6103fb60048036038101906103f691906130f3565b6110ae565b005b6104176004803603810190610412919061314d565b6110cd565b005b348015610424575f5ffd5b5061042d611358565b60405161043a9190612d68565b60405180910390f35b34801561044e575f5ffd5b50610469600480360381019061046491906131b5565b611389565b005b348015610476575f5ffd5b50610491600480360381019061048c919061314d565b611741565b60405161049e919061323b565b60405180910390f35b3480156104b2575f5ffd5b506104bb61177e565b6040516104c8919061323b565b60405180910390f35b3480156104dc575f5ffd5b506104f760048036038101906104f29190612f15565b6117a3565b6040516105049190612c27565b60405180910390f35b348015610518575f5ffd5b50610521611814565b60405161052e9190613263565b60405180910390f35b348015610542575f5ffd5b5061055d60048036038101906105589190612ca8565b61182d565b005b34801561056a575f5ffd5b5061058560048036038101906105809190612ca8565b6118c6565b60405161059695949392919061328b565b60405180910390f35b3480156105aa575f5ffd5b506105b3611936565b6040516105c09190612d68565b60405180910390f35b3480156105d4575f5ffd5b506105dd61193c565b6040516105ea919061333c565b60405180910390f35b3480156105fe575f5ffd5b506106196004803603810190610614919061335c565b611975565b005b348015610626575f5ffd5b50610641600480360381019061063c9190612f15565b611be0565b005b34801561064e575f5ffd5b506106696004803603810190610664919061314d565b611c02565b6040516106769190612ce2565b60405180910390f35b34801561068a575f5ffd5b506106a560048036038101906106a09190612e37565b611c22565b005b3480156106b2575f5ffd5b506106cd60048036038101906106c891906133cd565b611fe8565b005b3480156106da575f5ffd5b506106e3612126565b6040516106f09190612d68565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076b575061076a8261214a565b5b9050919050565b5f5f9054906101000a900461ffff1681565b5f60045f8381526020019081526020015f2090505f8160030154036107d5576040517f642e3ad700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42816004015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff161061082f576040517f3355482c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f815f015490505f826001015f9054906101000a900460801b90505f836002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8460030154905060045f8781526020019081526020015f205f5f82015f9055600182015f6101000a8154906fffffffffffffffffffffffffffffffff0219169055600282015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382015f9055600482015f6101000a81549067ffffffffffffffff021916905550508060055f8681526020019081526020015f205f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f8282546109519190613425565b925050819055508060035f8681526020019081526020015f205f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205410156109d8576040517fc4d7ebda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060035f8681526020019081526020015f205f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f828254610a2d9190613425565b925050819055505f60025f8681526020019081526020015f205f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826fffffffffffffffffffffffffffffffff191684877f5bad7ce9103a04027245449328134e980faffde663decc58fde44536d70e04cb8585604051610aff929190613458565b60405180910390a45f8273ffffffffffffffffffffffffffffffffffffffff1682604051610b2c906134ac565b5f6040518083038185875af1925050503d805f8114610b66576040519150601f19603f3d011682016040523d82523d5f602084013e610b6b565b606091505b5050905080610ba6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b5f6001905090565b5f5f610bc16121b3565b9050805f015f8481526020019081526020015f2060010154915050919050565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c67576040517f5aa309bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f8781526020019081526020015f205f866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205490505f8103610cea576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f8881526020019081526020015f205f876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20819055505f60025f8881526020019081526020015f205f876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f5f73ffffffffffffffffffffffffffffffffffffffff1683604051610dc3906134ac565b5f6040518083038185875af1925050503d805f8114610dfd576040519150601f19603f3d011682016040523d82523d5f602084013e610e02565b606091505b5050905080610e3d576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8a81526020019081526020015f205f896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16876fffffffffffffffffffffffffffffffff1916897f59fb97be32a1253f478d846d76623d23d63de327cedb08d6ccacf150ff91fd7f868a8a8a604051610f2294939291906134ec565b60405180910390a45050505050505050565b610f3d82610bb7565b610f46816121da565b610f5083836121ee565b50505050565b610f5e6122e6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610fc2576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fcc82826122ed565b505050565b5f5f1b610fdd816121da565b5f8267ffffffffffffffff1611611029576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110209061359a565b60405180910390fd5b5f5f60169054906101000a900467ffffffffffffffff169050825f60166101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f8444b26d17d3348bc267c929756f105c91cb4e50cab0579e0ecdefa0c51b53ce818460405161109b9291906135b8565b60405180910390a1505050565b60015481565b6110b66123e5565b6110bf826124cb565b6110c982826125b5565b5050565b600154341015611109576040517f5945ea5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8481526020019081526020015f205f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361122e573360025f8581526020019081526020015f205f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611294565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611293576040517f9ea26eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b3460035f8581526020019081526020015f205f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f8282546112e991906135df565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1916847fe07d9525c767a77f1c54bc2ceffdade4dfdadae69f96c94dcdb65a23246323693460405161134b9190612ce2565b60405180910390a4505050565b5f6113616126d3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f61139261275a565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f5f8267ffffffffffffffff161480156113da5750825b90505f60018367ffffffffffffffff1614801561140d57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801561141b575080155b15611452576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561149f576001855f0160086101000a81548160ff0219169083151502179055505b5f73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff160361150d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115049061365c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361157b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611572906136c4565b60405180910390fd5b5f88116115bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b490613752565b60405180910390fd5b5f8767ffffffffffffffff1611611609576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116009061359a565b60405180910390fd5b61161161276d565b611619612777565b895f5f6101000a81548161ffff021916908361ffff160217905550885f60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600181905550865f60166101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506116af5f5f1b876121ee565b506116da7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3876121ee565b508315611735575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161172c91906137b2565b60405180910390a15b50505050505050505050565b6002602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f6117ad6121b3565b9050805f015f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505092915050565b5f60169054906101000a900467ffffffffffffffff1681565b5f5f1b611839816121da565b5f821161187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290613752565b60405180910390fd5b5f6001549050826001819055507fcb15e5911a16310e744b07fe308cb14a2e854f08c4635c6c30f0f41b6aab3d5d81846040516118b99291906137cb565b60405180910390a1505050565b6004602052805f5260405f205f91509050805f015490806001015f9054906101000a900460801b90806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015f9054906101000a900467ffffffffffffffff16905085565b5f5f1b81565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119fb576040517f5aa309bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8681526020019081526020015f2090505f816003015403611a4c576040517f642e3ad700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42816004015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611aa7576040517ffc9e5c0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003015460055f835f015481526020019081526020015f205f836001015f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f828254611b139190613425565b92505081905550847f6067048e78883441f7c7f1b3ad8f94a88b1567a486029be8a830e9455f61edb9858585604051611b4e939291906137f2565b60405180910390a260045f8681526020019081526020015f205f5f82015f9055600182015f6101000a8154906fffffffffffffffffffffffffffffffff0219169055600282015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382015f9055600482015f6101000a81549067ffffffffffffffff021916905550505050505050565b611be982610bb7565b611bf2816121da565b611bfc83836122ed565b50505050565b6003602052815f5260405f20602052805f5260405f205f91509150505481565b60025f8681526020019081526020015f205f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cec576040517f9ea26eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f8781526020019081526020015f205f866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205490505f60055f8881526020019081526020015f205f876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205490505f8183611d8d9190613425565b90505f8103611dc8576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f60169054906101000a900467ffffffffffffffff1642611dea9190613822565b90506040518060a001604052808a8152602001896fffffffffffffffffffffffffffffffff191681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018267ffffffffffffffff1681525060045f60065481526020019081526020015f205f820151815f01556020820151816001015f6101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050508160055f8b81526020019081526020015f205f8a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f828254611f6691906135df565b92505081905550876fffffffffffffffffffffffffffffffff1916896006547ffd3d4f1c9a32bf51e721c588fa66ff4eb6635b376d5689cc9fe4361ab901a17f3386868d8d8d604051611fbe9695949392919061385d565b60405180910390a460065f815480929190611fd8906138b7565b9190505550505050505050505050565b5f5f1b611ff4816121da565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612062576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120599061396e565b60405180910390fd5b5f5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050825f60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f280dc165ab909ad5f771dbb3efc0591efc379b9a35ee781dd1472e09e8ec976060405160405180910390a3505050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6121eb816121e66122e6565b612781565b50565b5f5f6121f86121b3565b905061220484846117a3565b6122db576001815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506122776122e6565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506122e0565b5f9150505b92915050565b5f33905090565b5f5f6122f76121b3565b905061230384846117a3565b156123da575f815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506123766122e6565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506123df565b5f9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061249257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124796127d2565b73ffffffffffffffffffffffffffffffffffffffff1614155b156124c9576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36124f5816121da565b8173ffffffffffffffffffffffffffffffffffffffff1660013073ffffffffffffffffffffffffffffffffffffffff16630d8e6e2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612557573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061257b91906139a0565b61258591906135df565b7f208a82eaf59643630be08b56d23aff3c045a061d5859a2d15e4e2cd7c31a1a4360405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561261d57506040513d601f19601f8201168201806040525081019061261a91906139df565b60015b61265e57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612655919061323b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146126c457806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016126bb9190612d68565b60405180910390fd5b6126ce8383612825565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612758576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f5f612764612897565b90508091505090565b6127756128c0565b565b61277f6128c0565b565b61278b82826117a3565b6127ce5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016127c5929190613a0a565b60405180910390fd5b5050565b5f6127fe7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b612900565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61282e82612909565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f8151111561288a5761288482826129d2565b50612893565b612892612a52565b5b5050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005f1b905090565b6128c8612a8e565b6128fe576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361296457806040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161295b919061323b565b60405180910390fd5b806129907f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b612900565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516129fb9190613a6b565b5f60405180830381855af49150503d805f8114612a33576040519150601f19603f3d011682016040523d82523d5f602084013e612a38565b606091505b5091509150612a48858383612aac565b9250505092915050565b5f341115612a8c576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612a9761275a565b5f0160089054906101000a900460ff16905090565b606082612ac157612abc82612b39565b612b31565b5f8251148015612ae757505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15612b2957836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612b20919061323b565b60405180910390fd5b819050612b32565b5b9392505050565b5f81511115612b4a57805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bc181612b8d565b8114612bcb575f5ffd5b50565b5f81359050612bdc81612bb8565b92915050565b5f60208284031215612bf757612bf6612b85565b5b5f612c0484828501612bce565b91505092915050565b5f8115159050919050565b612c2181612c0d565b82525050565b5f602082019050612c3a5f830184612c18565b92915050565b5f61ffff82169050919050565b612c5681612c40565b82525050565b5f602082019050612c6f5f830184612c4d565b92915050565b5f819050919050565b612c8781612c75565b8114612c91575f5ffd5b50565b5f81359050612ca281612c7e565b92915050565b5f60208284031215612cbd57612cbc612b85565b5b5f612cca84828501612c94565b91505092915050565b612cdc81612c75565b82525050565b5f602082019050612cf55f830184612cd3565b92915050565b5f819050919050565b612d0d81612cfb565b8114612d17575f5ffd5b50565b5f81359050612d2881612d04565b92915050565b5f60208284031215612d4357612d42612b85565b5b5f612d5084828501612d1a565b91505092915050565b612d6281612cfb565b82525050565b5f602082019050612d7b5f830184612d59565b92915050565b5f7fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b612db581612d81565b8114612dbf575f5ffd5b50565b5f81359050612dd081612dac565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112612df757612df6612dd6565b5b8235905067ffffffffffffffff811115612e1457612e13612dda565b5b602083019150836001820283011115612e3057612e2f612dde565b5b9250929050565b5f5f5f5f5f60808688031215612e5057612e4f612b85565b5b5f612e5d88828901612d1a565b9550506020612e6e88828901612dc2565b945050604086013567ffffffffffffffff811115612e8f57612e8e612b89565b5b612e9b88828901612de2565b93509350506060612eae88828901612dc2565b9150509295509295909350565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612ee482612ebb565b9050919050565b612ef481612eda565b8114612efe575f5ffd5b50565b5f81359050612f0f81612eeb565b92915050565b5f5f60408385031215612f2b57612f2a612b85565b5b5f612f3885828601612d1a565b9250506020612f4985828601612f01565b9150509250929050565b5f67ffffffffffffffff82169050919050565b612f6f81612f53565b8114612f79575f5ffd5b50565b5f81359050612f8a81612f66565b92915050565b5f60208284031215612fa557612fa4612b85565b5b5f612fb284828501612f7c565b91505092915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61300582612fbf565b810181811067ffffffffffffffff8211171561302457613023612fcf565b5b80604052505050565b5f613036612b7c565b90506130428282612ffc565b919050565b5f67ffffffffffffffff82111561306157613060612fcf565b5b61306a82612fbf565b9050602081019050919050565b828183375f83830152505050565b5f61309761309284613047565b61302d565b9050828152602081018484840111156130b3576130b2612fbb565b5b6130be848285613077565b509392505050565b5f82601f8301126130da576130d9612dd6565b5b81356130ea848260208601613085565b91505092915050565b5f5f6040838503121561310957613108612b85565b5b5f61311685828601612f01565b925050602083013567ffffffffffffffff81111561313757613136612b89565b5b613143858286016130c6565b9150509250929050565b5f5f6040838503121561316357613162612b85565b5b5f61317085828601612d1a565b925050602061318185828601612dc2565b9150509250929050565b61319481612c40565b811461319e575f5ffd5b50565b5f813590506131af8161318b565b92915050565b5f5f5f5f5f60a086880312156131ce576131cd612b85565b5b5f6131db888289016131a1565b95505060206131ec88828901612f01565b94505060406131fd88828901612c94565b935050606061320e88828901612f7c565b925050608061321f88828901612f01565b9150509295509295909350565b61323581612eda565b82525050565b5f60208201905061324e5f83018461322c565b92915050565b61325d81612f53565b82525050565b5f6020820190506132765f830184613254565b92915050565b61328581612d81565b82525050565b5f60a08201905061329e5f830188612d59565b6132ab602083018761327c565b6132b8604083018661322c565b6132c56060830185612cd3565b6132d26080830184613254565b9695505050505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61330e826132dc565b61331881856132e6565b93506133288185602086016132f6565b61333181612fbf565b840191505092915050565b5f6020820190508181035f8301526133548184613304565b905092915050565b5f5f5f5f6060858703121561337457613373612b85565b5b5f61338187828801612c94565b945050602085013567ffffffffffffffff8111156133a2576133a1612b89565b5b6133ae87828801612de2565b935093505060406133c187828801612dc2565b91505092959194509250565b5f602082840312156133e2576133e1612b85565b5b5f6133ef84828501612f01565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61342f82612c75565b915061343a83612c75565b9250828203905081811115613452576134516133f8565b5b92915050565b5f60408201905061346b5f83018561322c565b6134786020830184612cd3565b9392505050565b5f81905092915050565b50565b5f6134975f8361347f565b91506134a282613489565b5f82019050919050565b5f6134b68261348c565b9150819050919050565b5f6134cb83856132e6565b93506134d8838584613077565b6134e183612fbf565b840190509392505050565b5f6060820190506134ff5f830187612cd3565b81810360208301526135128185876134c0565b9050613521604083018461327c565b95945050505050565b7f4465636973696f6e2074696d656f7574206d75737420626520677265617465725f8201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b5f6135846027836132e6565b915061358f8261352a565b604082019050919050565b5f6020820190508181035f8301526135b181613578565b9050919050565b5f6040820190506135cb5f830185613254565b6135d86020830184613254565b9392505050565b5f6135e982612c75565b91506135f483612c75565b925082820190508082111561360c5761360b6133f8565b5b92915050565b7f547275737465652061646472657373206d757374206265206e6f6e2d7a65726f5f82015250565b5f6136466020836132e6565b915061365182613612565b602082019050919050565b5f6020820190508181035f8301526136738161363a565b9050919050565b7f41646d696e2061646472657373206d757374206265206e6f6e2d7a65726f00005f82015250565b5f6136ae601e836132e6565b91506136b98261367a565b602082019050919050565b5f6020820190508181035f8301526136db816136a2565b9050919050565b7f4d696e20636f6c6c61746572616c20696e637265617365206d757374206265205f8201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b5f61373c602e836132e6565b9150613747826136e2565b604082019050919050565b5f6020820190508181035f83015261376981613730565b9050919050565b5f819050919050565b5f819050919050565b5f61379c61379761379284613770565b613779565b612f53565b9050919050565b6137ac81613782565b82525050565b5f6020820190506137c55f8301846137a3565b92915050565b5f6040820190506137de5f830185612cd3565b6137eb6020830184612cd3565b9392505050565b5f6040820190508181035f83015261380b8185876134c0565b905061381a602083018461327c565b949350505050565b5f61382c82612f53565b915061383783612f53565b9250828201905067ffffffffffffffff811115613857576138566133f8565b5b92915050565b5f60a0820190506138705f83018961322c565b61387d6020830188612cd3565b61388a6040830187613254565b818103606083015261389d8185876134c0565b90506138ac608083018461327c565b979650505050505050565b5f6138c182612c75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138f3576138f26133f8565b5b600182019050919050565b7f4e657720747275737465652063616e6e6f74206265207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6139586022836132e6565b9150613963826138fe565b604082019050919050565b5f6020820190508181035f8301526139858161394c565b9050919050565b5f8151905061399a81612c7e565b92915050565b5f602082840312156139b5576139b4612b85565b5b5f6139c28482850161398c565b91505092915050565b5f815190506139d981612d04565b92915050565b5f602082840312156139f4576139f3612b85565b5b5f613a01848285016139cb565b91505092915050565b5f604082019050613a1d5f83018561322c565b613a2a6020830184612d59565b9392505050565b5f81519050919050565b5f613a4582613a31565b613a4f818561347f565b9350613a5f8185602086016132f6565b80840191505092915050565b5f613a768284613a3b565b91508190509291505056fea26469706673582212200cbc019ec34a7673fb388dbce377d1b74aea437f52ea3769e82bad47872474ef64736f6c634300081c0033"
    )]
    CollateralUpgradeable,
    "./src/CollateralUpgradableABI.json"
);

#[derive(Debug, Clone)]
pub struct Reclaim {
    pub hotkey: [u8; 32],
    pub executor_id: u128,
    pub miner: Address,
    pub amount: U256,
    pub deny_timeout: u64,
}

impl From<(FixedBytes<32>, FixedBytes<16>, Address, U256, u64)> for Reclaim {
    fn from(tuple: (FixedBytes<32>, FixedBytes<16>, Address, U256, u64)) -> Self {
        Self {
            hotkey: {
                let mut hk = [0u8; 32];
                hk.copy_from_slice(tuple.0.as_slice());
                hk
            },
            executor_id: {
                let mut b = [0u8; 16];
                b.copy_from_slice(tuple.1.as_slice());
                u128::from_be_bytes(b)
            },
            miner: tuple.2,
            amount: tuple.3,
            deny_timeout: tuple.4,
        }
    }
}

pub enum CollateralEvent {
    Deposit(CollateralUpgradeable::Deposit),
    Reclaimed(CollateralUpgradeable::Reclaimed),
    Slashed(CollateralUpgradeable::Slashed),
}

// get the collateral contract instance
pub async fn get_collateral(
    private_key: &str,
) -> Result<
    CollateralUpgradeable::CollateralUpgradeableInstance<impl alloy_provider::Provider>,
    anyhow::Error,
> {
    let mut signer: PrivateKeySigner = private_key.parse()?;
    signer.set_chain_id(Some(CHAIN_ID));

    let provider = ProviderBuilder::new()
        .wallet(signer)
        .connect(RPC_URL)
        .await?;

    let proxied = CollateralUpgradeable::new(PROXY_ADDRESS, provider);

    Ok(proxied)
}

pub async fn scan_events(
    from_block: u64,
) -> Result<(u64, HashMap<u64, Vec<CollateralEvent>>), anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let current_block = provider.get_block_number().await?.saturating_sub(1);

    if from_block > current_block {
        return Err(anyhow::anyhow!(
            "from_block must be less than current_block"
        ));
    }

    let mut to_block = from_block + MAX_BLOCKS_PER_SCAN;

    if to_block > current_block {
        to_block = current_block;
    }

    let filter = Filter::new()
        .address(PROXY_ADDRESS)
        .from_block(from_block)
        .to_block(to_block);

    let logs = provider.get_logs(&filter).await?;

    let mut result: HashMap<u64, Vec<CollateralEvent>> = HashMap::new();

    for log in logs {
        if log.removed {
            continue;
        }

        let topics = log.inner.topics();
        let topic0 = topics.first();
        let block_number = log
            .block_number
            .ok_or(anyhow::anyhow!("Block number not available in event"))?;

        let block_result = result.get_mut(&block_number);

        let event = match topic0 {
            Some(sig) if sig == &CollateralUpgradeable::Deposit::SIGNATURE_HASH => {
                let deposit = CollateralUpgradeable::Deposit::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Deposit(deposit))
            }
            Some(sig) if sig == &CollateralUpgradeable::Reclaimed::SIGNATURE_HASH => {
                let reclaimed = CollateralUpgradeable::Reclaimed::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Reclaimed(reclaimed))
            }
            Some(sig) if sig == &CollateralUpgradeable::Slashed::SIGNATURE_HASH => {
                let slashed = CollateralUpgradeable::Slashed::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Slashed(slashed))
            }
            _ => None,
        };

        if let Some(event) = event {
            match block_result {
                Some(events) => {
                    events.push(event);
                }
                None => {
                    result.insert(block_number, vec![event]);
                }
            }
        }
    }

    info!(
        "Scanned blocks {} to {}, {} events are found",
        from_block,
        to_block,
        result.values().map(|v| v.len()).sum::<usize>()
    );
    Ok((to_block, result))
}

// transactions
pub async fn deposit(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: u128,
    amount: U256,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key).await?;

    let executor_bytes = executor_id.to_be_bytes();
    let tx = contract
        .deposit(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_bytes),
        )
        .value(amount);
    let tx = tx.send().await?;
    let receipt = tx.get_receipt().await?;
    tracing::info!("{receipt:?}");
    Ok(())
}

pub async fn reclaim_collateral(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: u128,
    url: &str,
    url_content_md5_checksum: u128,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key).await?;

    let executor_bytes = executor_id.to_be_bytes();
    let tx = contract.reclaimCollateral(
        FixedBytes::from_slice(&hotkey),
        FixedBytes::from_slice(&executor_bytes),
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn finalize_reclaim(
    private_key: &str,
    reclaim_request_id: U256,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key).await?;

    let tx = contract.finalizeReclaim(reclaim_request_id);
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn deny_reclaim(
    private_key: &str,
    reclaim_request_id: U256,
    url: &str,
    url_content_md5_checksum: u128,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key).await?;

    let tx = contract.denyReclaimRequest(
        reclaim_request_id,
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn slash_collateral(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: u128,
    url: &str,
    url_content_md5_checksum: u128,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key).await?;

    let executor_bytes = executor_id.to_be_bytes();
    let tx = contract.slashCollateral(
        FixedBytes::from_slice(&hotkey),
        FixedBytes::from_slice(&executor_bytes),
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

// Get methods

pub async fn netuid() -> Result<u16, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let netuid = contract.NETUID().call().await?;
    Ok(netuid)
}

pub async fn trustee() -> Result<Address, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let trustee = contract.TRUSTEE().call().await?;
    Ok(trustee)
}

pub async fn decision_timeout() -> Result<u64, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let decision_timeout = contract.DECISION_TIMEOUT().call().await?;
    Ok(decision_timeout)
}

pub async fn min_collateral_increase() -> Result<U256, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let min_collateral_increase = contract.MIN_COLLATERAL_INCREASE().call().await?;
    Ok(min_collateral_increase)
}

pub async fn executor_to_miner(
    hotkey: [u8; 32],
    executor_id: u128,
) -> Result<Address, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let executor_bytes = executor_id.to_be_bytes();
    let executor_to_miner = contract
        .executorToMiner(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_bytes),
        )
        .call()
        .await?;
    Ok(executor_to_miner)
}

pub async fn collaterals(hotkey: [u8; 32], executor_id: u128) -> Result<U256, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let executor_bytes = executor_id.to_be_bytes();
    let collaterals = contract
        .collaterals(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_bytes),
        )
        .call()
        .await?;
    Ok(collaterals)
}

pub async fn reclaims(reclaim_request_id: U256) -> Result<Reclaim, anyhow::Error> {
    let provider = ProviderBuilder::new().connect(RPC_URL).await?;
    let contract = CollateralUpgradeable::new(PROXY_ADDRESS, provider);
    let result = contract.reclaims(reclaim_request_id).call().await?;
    let reclaim = Reclaim::from((
        result.hotkey,
        result.executorId,
        result.miner,
        result.amount,
        result.denyTimeout,
    ));
    Ok(reclaim)
}
