// This file is @generated by prost-build.
/// Request to provision validator access
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProvisionAccessRequest {
    /// Validator hotkey requesting access
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    /// SSH public key for validator (if using SSH)
    #[prost(string, tag = "2")]
    pub ssh_public_key: ::prost::alloc::string::String,
    /// Access token or temporary credentials
    #[prost(string, tag = "3")]
    pub access_token: ::prost::alloc::string::String,
    /// Access duration in seconds
    #[prost(uint64, tag = "4")]
    pub duration_seconds: u64,
    /// Access type (ssh, api, etc.)
    #[prost(string, tag = "5")]
    pub access_type: ::prost::alloc::string::String,
    /// Additional configuration
    #[prost(map = "string, string", tag = "6")]
    pub config: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Authentication data from miner
    #[prost(message, optional, tag = "7")]
    pub auth: ::core::option::Option<super::super::common::v1::MinerAuthentication>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProvisionAccessResponse {
    /// Whether access was successfully provisioned
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Connection details for validator
    #[prost(string, tag = "2")]
    pub connection_endpoint: ::prost::alloc::string::String,
    /// Access credentials or instructions
    #[prost(string, tag = "3")]
    pub credentials: ::prost::alloc::string::String,
    /// Expiration time
    #[prost(message, optional, tag = "4")]
    pub expires_at: ::core::option::Option<super::super::common::v1::Timestamp>,
    /// Error information if failed
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Request for system profiling
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemProfileRequest {
    /// Session key for encryption of sensitive data
    #[prost(string, tag = "1")]
    pub session_key: ::prost::alloc::string::String,
    /// Key name mapping for JSON field obfuscation
    #[prost(map = "string, string", tag = "2")]
    pub key_mapping: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Profiling depth (basic, detailed, full)
    #[prost(string, tag = "3")]
    pub profile_depth: ::prost::alloc::string::String,
    /// Include performance benchmarks
    #[prost(bool, tag = "4")]
    pub include_benchmarks: bool,
    /// Requesting validator hotkey
    #[prost(string, tag = "5")]
    pub validator_hotkey: ::prost::alloc::string::String,
    /// Authentication data from miner
    #[prost(message, optional, tag = "6")]
    pub auth: ::core::option::Option<super::super::common::v1::MinerAuthentication>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemProfileResponse {
    /// Encrypted and obfuscated system profile data
    #[prost(string, tag = "1")]
    pub encrypted_profile: ::prost::alloc::string::String,
    /// Encryption nonce
    #[prost(string, tag = "2")]
    pub encryption_nonce: ::prost::alloc::string::String,
    /// Profile collection timestamp
    #[prost(message, optional, tag = "3")]
    pub collected_at: ::core::option::Option<super::super::common::v1::Timestamp>,
    /// Profile hash for integrity verification
    #[prost(string, tag = "4")]
    pub profile_hash: ::prost::alloc::string::String,
    /// Error information if failed
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Benchmark execution request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BenchmarkRequest {
    /// Benchmark type (cpu, gpu, memory, network, disk)
    #[prost(string, tag = "1")]
    pub benchmark_type: ::prost::alloc::string::String,
    /// Benchmark duration in seconds
    #[prost(uint64, tag = "2")]
    pub duration_seconds: u64,
    /// Benchmark parameters
    #[prost(map = "string, string", tag = "3")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Requesting validator hotkey
    #[prost(string, tag = "4")]
    pub validator_hotkey: ::prost::alloc::string::String,
    /// Authentication data from miner
    #[prost(message, optional, tag = "5")]
    pub auth: ::core::option::Option<super::super::common::v1::MinerAuthentication>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BenchmarkResponse {
    /// Benchmark results
    #[prost(map = "string, string", tag = "1")]
    pub results: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Performance score
    #[prost(double, tag = "2")]
    pub score: f64,
    /// Execution details
    #[prost(string, tag = "3")]
    pub execution_details: ::prost::alloc::string::String,
    /// Error information if failed
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Container operation request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerOpRequest {
    /// Operation type (create, delete, start, stop, add_key, get_status)
    #[prost(string, tag = "1")]
    pub operation: ::prost::alloc::string::String,
    /// Container specification (for create)
    #[prost(message, optional, tag = "2")]
    pub container_spec: ::core::option::Option<super::super::common::v1::ContainerSpec>,
    /// Container ID (for other operations)
    #[prost(string, tag = "3")]
    pub container_id: ::prost::alloc::string::String,
    /// SSH public key to add (for add_key operation)
    #[prost(string, tag = "4")]
    pub ssh_public_key: ::prost::alloc::string::String,
    /// Operation parameters
    #[prost(map = "string, string", tag = "5")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Requesting validator hotkey
    #[prost(string, tag = "6")]
    pub validator_hotkey: ::prost::alloc::string::String,
    /// Authentication data from miner
    #[prost(message, optional, tag = "7")]
    pub auth: ::core::option::Option<super::super::common::v1::MinerAuthentication>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerOpResponse {
    /// Operation success status
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Container ID (for create operation)
    #[prost(string, tag = "2")]
    pub container_id: ::prost::alloc::string::String,
    /// Container status
    #[prost(message, optional, tag = "3")]
    pub status: ::core::option::Option<super::super::common::v1::ContainerStatus>,
    /// Operation result details
    #[prost(string, tag = "4")]
    pub details: ::prost::alloc::string::String,
    /// Error information if failed
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Log subscription request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSubscriptionRequest {
    /// Container ID to stream logs from (optional)
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Log sources to include (stdout, stderr, system)
    #[prost(string, repeated, tag = "2")]
    pub sources: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Follow logs (tail -f behavior)
    #[prost(bool, tag = "3")]
    pub follow: bool,
    /// Number of historical lines to include
    #[prost(uint32, tag = "4")]
    pub tail_lines: u32,
    /// Log level filter
    #[prost(string, tag = "5")]
    pub level_filter: ::prost::alloc::string::String,
    /// Requesting validator hotkey
    #[prost(string, tag = "6")]
    pub validator_hotkey: ::prost::alloc::string::String,
}
/// Health check request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {
    /// Requesting entity
    #[prost(string, tag = "1")]
    pub requester: ::prost::alloc::string::String,
    /// Check type (basic, detailed)
    #[prost(string, tag = "2")]
    pub check_type: ::prost::alloc::string::String,
    /// Authentication data from miner (optional for health checks)
    #[prost(message, optional, tag = "3")]
    pub auth: ::core::option::Option<super::super::common::v1::MinerAuthentication>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    /// Overall health status
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// System resource status
    #[prost(map = "string, string", tag = "2")]
    pub resource_status: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Docker status
    #[prost(string, tag = "3")]
    pub docker_status: ::prost::alloc::string::String,
    /// Uptime in seconds
    #[prost(uint64, tag = "4")]
    pub uptime_seconds: u64,
    /// Last update timestamp
    #[prost(message, optional, tag = "5")]
    pub last_update: ::core::option::Option<super::super::common::v1::Timestamp>,
    /// Additional health metrics
    #[prost(map = "string, string", tag = "6")]
    pub metrics: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Generated client implementations.
pub mod executor_control_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ExecutorControl service for managing executor agents
    /// Implemented by: executor_agent
    /// Called by: miner_node
    #[derive(Debug, Clone)]
    pub struct ExecutorControlClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ExecutorControlClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ExecutorControlClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ExecutorControlClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ExecutorControlClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Provision validator access by setting up SSH keys or access tokens
        /// Replaces the old SSH key upload mechanism
        pub async fn provision_validator_access(
            &mut self,
            request: impl tonic::IntoRequest<super::ProvisionAccessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProvisionAccessResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/ProvisionValidatorAccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor.v1.ExecutorControl",
                        "ProvisionValidatorAccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Execute system profiling to collect machine specifications
        /// Replaces running machine_scrape.py
        pub async fn execute_system_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::SystemProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SystemProfileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/ExecuteSystemProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor.v1.ExecutorControl",
                        "ExecuteSystemProfile",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Execute performance benchmarks
        pub async fn execute_benchmark(
            &mut self,
            request: impl tonic::IntoRequest<super::BenchmarkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BenchmarkResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/ExecuteBenchmark",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor.v1.ExecutorControl",
                        "ExecuteBenchmark",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Manage containers (create, delete, start, stop, add SSH keys)
        pub async fn manage_container(
            &mut self,
            request: impl tonic::IntoRequest<super::ContainerOpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContainerOpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/ManageContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor.v1.ExecutorControl",
                        "ManageContainer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Stream container and system logs
        pub async fn stream_logs(
            &mut self,
            request: impl tonic::IntoRequest<super::LogSubscriptionRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::super::super::common::v1::LogEntry>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/StreamLogs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("basilca.executor.v1.ExecutorControl", "StreamLogs"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Health check and heartbeat
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor.v1.ExecutorControl/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("basilca.executor.v1.ExecutorControl", "HealthCheck"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod executor_control_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ExecutorControlServer.
    #[async_trait]
    pub trait ExecutorControl: Send + Sync + 'static {
        /// Provision validator access by setting up SSH keys or access tokens
        /// Replaces the old SSH key upload mechanism
        async fn provision_validator_access(
            &self,
            request: tonic::Request<super::ProvisionAccessRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProvisionAccessResponse>,
            tonic::Status,
        >;
        /// Execute system profiling to collect machine specifications
        /// Replaces running machine_scrape.py
        async fn execute_system_profile(
            &self,
            request: tonic::Request<super::SystemProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SystemProfileResponse>,
            tonic::Status,
        >;
        /// Execute performance benchmarks
        async fn execute_benchmark(
            &self,
            request: tonic::Request<super::BenchmarkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BenchmarkResponse>,
            tonic::Status,
        >;
        /// Manage containers (create, delete, start, stop, add SSH keys)
        async fn manage_container(
            &self,
            request: tonic::Request<super::ContainerOpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContainerOpResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamLogs method.
        type StreamLogsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::common::v1::LogEntry,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// Stream container and system logs
        async fn stream_logs(
            &self,
            request: tonic::Request<super::LogSubscriptionRequest>,
        ) -> std::result::Result<tonic::Response<Self::StreamLogsStream>, tonic::Status>;
        /// Health check and heartbeat
        async fn health_check(
            &self,
            request: tonic::Request<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        >;
    }
    /// ExecutorControl service for managing executor agents
    /// Implemented by: executor_agent
    /// Called by: miner_node
    #[derive(Debug)]
    pub struct ExecutorControlServer<T: ExecutorControl> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ExecutorControl> ExecutorControlServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ExecutorControlServer<T>
    where
        T: ExecutorControl,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/basilca.executor.v1.ExecutorControl/ProvisionValidatorAccess" => {
                    #[allow(non_camel_case_types)]
                    struct ProvisionValidatorAccessSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::UnaryService<super::ProvisionAccessRequest>
                    for ProvisionValidatorAccessSvc<T> {
                        type Response = super::ProvisionAccessResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProvisionAccessRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::provision_validator_access(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ProvisionValidatorAccessSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor.v1.ExecutorControl/ExecuteSystemProfile" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteSystemProfileSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::UnaryService<super::SystemProfileRequest>
                    for ExecuteSystemProfileSvc<T> {
                        type Response = super::SystemProfileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SystemProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::execute_system_profile(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExecuteSystemProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor.v1.ExecutorControl/ExecuteBenchmark" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteBenchmarkSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::UnaryService<super::BenchmarkRequest>
                    for ExecuteBenchmarkSvc<T> {
                        type Response = super::BenchmarkResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BenchmarkRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::execute_benchmark(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExecuteBenchmarkSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor.v1.ExecutorControl/ManageContainer" => {
                    #[allow(non_camel_case_types)]
                    struct ManageContainerSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::UnaryService<super::ContainerOpRequest>
                    for ManageContainerSvc<T> {
                        type Response = super::ContainerOpResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ContainerOpRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::manage_container(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ManageContainerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor.v1.ExecutorControl/StreamLogs" => {
                    #[allow(non_camel_case_types)]
                    struct StreamLogsSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::ServerStreamingService<
                        super::LogSubscriptionRequest,
                    > for StreamLogsSvc<T> {
                        type Response = super::super::super::common::v1::LogEntry;
                        type ResponseStream = T::StreamLogsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LogSubscriptionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::stream_logs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamLogsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor.v1.ExecutorControl/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: ExecutorControl>(pub Arc<T>);
                    impl<
                        T: ExecutorControl,
                    > tonic::server::UnaryService<super::HealthCheckRequest>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthCheckResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthCheckRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorControl>::health_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ExecutorControl> Clone for ExecutorControlServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ExecutorControl> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ExecutorControl> tonic::server::NamedService for ExecutorControlServer<T> {
        const NAME: &'static str = "basilca.executor.v1.ExecutorControl";
    }
}
