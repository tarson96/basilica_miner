// This file is @generated by prost-build.
/// Request to register an executor
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterExecutorRequest {
    /// Executor unique identifier
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    /// gRPC address where the executor control service is available
    #[prost(string, tag = "2")]
    pub grpc_address: ::prost::alloc::string::String,
    /// GPU attestation report from gpu-attestor
    #[prost(message, optional, tag = "3")]
    pub gpu_attestation: ::core::option::Option<
        super::super::common::v1::GpuAttestation,
    >,
    /// System profile including CPU, memory, storage
    #[prost(message, optional, tag = "4")]
    pub system_profile: ::core::option::Option<super::super::common::v1::SystemProfile>,
    /// Executor software version
    #[prost(string, tag = "5")]
    pub version: ::prost::alloc::string::String,
    /// Miner credentials for authentication
    #[prost(string, tag = "6")]
    pub miner_hotkey: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub nonce: ::prost::alloc::string::String,
    /// Additional metadata
    #[prost(map = "string, string", tag = "9")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterExecutorResponse {
    /// Registration success status
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Registration token for future requests
    #[prost(string, tag = "2")]
    pub registration_token: ::prost::alloc::string::String,
    /// Expected heartbeat interval in seconds
    #[prost(uint64, tag = "3")]
    pub heartbeat_interval_seconds: u64,
    /// Configuration updates for the executor
    #[prost(map = "string, string", tag = "4")]
    pub config_updates: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Error information if registration failed
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Request to update executor status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateExecutorStatusRequest {
    /// Executor identifier
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    /// Registration token from initial registration
    #[prost(string, tag = "2")]
    pub registration_token: ::prost::alloc::string::String,
    /// Current executor status (online, offline, maintenance, etc.)
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    /// Updated resource availability
    #[prost(message, optional, tag = "4")]
    pub available_resources: ::core::option::Option<
        super::super::common::v1::ResourceLimits,
    >,
    /// Updated GPU status if changed
    #[prost(message, optional, tag = "5")]
    pub gpu_spec: ::core::option::Option<super::super::common::v1::GpuSpec>,
    /// Additional status metadata
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateExecutorStatusResponse {
    /// Update success status
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Configuration updates if any
    #[prost(map = "string, string", tag = "2")]
    pub config_updates: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Error information if update failed
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Request to unregister an executor
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterExecutorRequest {
    /// Executor identifier
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    /// Registration token
    #[prost(string, tag = "2")]
    pub registration_token: ::prost::alloc::string::String,
    /// Reason for unregistration
    #[prost(string, tag = "3")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterExecutorResponse {
    /// Unregistration success status
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Final message or instructions
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Error information if unregistration failed
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Heartbeat request to maintain registration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    /// Executor identifier
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    /// Registration token
    #[prost(string, tag = "2")]
    pub registration_token: ::prost::alloc::string::String,
    /// Current resource utilization
    #[prost(message, optional, tag = "3")]
    pub resource_utilization: ::core::option::Option<
        super::super::common::v1::ResourceUtilization,
    >,
    /// Health status
    #[prost(map = "string, string", tag = "4")]
    pub health_status: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Timestamp
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<super::super::common::v1::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    /// Heartbeat acknowledged
    #[prost(bool, tag = "1")]
    pub acknowledged: bool,
    /// Configuration updates if any
    #[prost(map = "string, string", tag = "2")]
    pub config_updates: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Commands for the executor (if any)
    #[prost(string, repeated, tag = "3")]
    pub commands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Error information if heartbeat processing failed
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
/// Generated client implementations.
pub mod executor_registration_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ExecutorRegistration service for executor-miner registration
    /// Implemented by: miner_node
    /// Called by: executor_agent
    #[derive(Debug, Clone)]
    pub struct ExecutorRegistrationClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ExecutorRegistrationClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ExecutorRegistrationClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ExecutorRegistrationClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ExecutorRegistrationClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Register executor with the miner
        pub async fn register_executor(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterExecutorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterExecutorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor_registration.v1.ExecutorRegistration/RegisterExecutor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor_registration.v1.ExecutorRegistration",
                        "RegisterExecutor",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Update executor status and capabilities
        pub async fn update_executor_status(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateExecutorStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateExecutorStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor_registration.v1.ExecutorRegistration/UpdateExecutorStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor_registration.v1.ExecutorRegistration",
                        "UpdateExecutorStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Unregister executor from the miner
        pub async fn unregister_executor(
            &mut self,
            request: impl tonic::IntoRequest<super::UnregisterExecutorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterExecutorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor_registration.v1.ExecutorRegistration/UnregisterExecutor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor_registration.v1.ExecutorRegistration",
                        "UnregisterExecutor",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Send heartbeat to maintain registration
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.executor_registration.v1.ExecutorRegistration/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.executor_registration.v1.ExecutorRegistration",
                        "Heartbeat",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod executor_registration_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ExecutorRegistrationServer.
    #[async_trait]
    pub trait ExecutorRegistration: Send + Sync + 'static {
        /// Register executor with the miner
        async fn register_executor(
            &self,
            request: tonic::Request<super::RegisterExecutorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterExecutorResponse>,
            tonic::Status,
        >;
        /// Update executor status and capabilities
        async fn update_executor_status(
            &self,
            request: tonic::Request<super::UpdateExecutorStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateExecutorStatusResponse>,
            tonic::Status,
        >;
        /// Unregister executor from the miner
        async fn unregister_executor(
            &self,
            request: tonic::Request<super::UnregisterExecutorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterExecutorResponse>,
            tonic::Status,
        >;
        /// Send heartbeat to maintain registration
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
    }
    /// ExecutorRegistration service for executor-miner registration
    /// Implemented by: miner_node
    /// Called by: executor_agent
    #[derive(Debug)]
    pub struct ExecutorRegistrationServer<T: ExecutorRegistration> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ExecutorRegistration> ExecutorRegistrationServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ExecutorRegistrationServer<T>
    where
        T: ExecutorRegistration,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/basilca.executor_registration.v1.ExecutorRegistration/RegisterExecutor" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterExecutorSvc<T: ExecutorRegistration>(pub Arc<T>);
                    impl<
                        T: ExecutorRegistration,
                    > tonic::server::UnaryService<super::RegisterExecutorRequest>
                    for RegisterExecutorSvc<T> {
                        type Response = super::RegisterExecutorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterExecutorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorRegistration>::register_executor(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RegisterExecutorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor_registration.v1.ExecutorRegistration/UpdateExecutorStatus" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateExecutorStatusSvc<T: ExecutorRegistration>(pub Arc<T>);
                    impl<
                        T: ExecutorRegistration,
                    > tonic::server::UnaryService<super::UpdateExecutorStatusRequest>
                    for UpdateExecutorStatusSvc<T> {
                        type Response = super::UpdateExecutorStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateExecutorStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorRegistration>::update_executor_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateExecutorStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor_registration.v1.ExecutorRegistration/UnregisterExecutor" => {
                    #[allow(non_camel_case_types)]
                    struct UnregisterExecutorSvc<T: ExecutorRegistration>(pub Arc<T>);
                    impl<
                        T: ExecutorRegistration,
                    > tonic::server::UnaryService<super::UnregisterExecutorRequest>
                    for UnregisterExecutorSvc<T> {
                        type Response = super::UnregisterExecutorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnregisterExecutorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorRegistration>::unregister_executor(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UnregisterExecutorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.executor_registration.v1.ExecutorRegistration/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: ExecutorRegistration>(pub Arc<T>);
                    impl<
                        T: ExecutorRegistration,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExecutorRegistration>::heartbeat(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ExecutorRegistration> Clone for ExecutorRegistrationServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ExecutorRegistration> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ExecutorRegistration> tonic::server::NamedService
    for ExecutorRegistrationServer<T> {
        const NAME: &'static str = "basilca.executor_registration.v1.ExecutorRegistration";
    }
}
