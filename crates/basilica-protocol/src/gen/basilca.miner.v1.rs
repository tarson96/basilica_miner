// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorAuthRequest {
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub nonce: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<super::super::common::v1::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MinerAuthResponse {
    #[prost(bool, tag = "1")]
    pub authenticated: bool,
    #[prost(string, tag = "2")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub expires_at: ::core::option::Option<super::super::common::v1::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
    /// Miner identity verification fields
    ///
    /// Miner's hotkey for verification
    #[prost(string, tag = "5")]
    pub miner_hotkey: ::prost::alloc::string::String,
    /// Signature proving miner's identity
    #[prost(string, tag = "6")]
    pub miner_signature: ::prost::alloc::string::String,
    /// Nonce included in signature to prevent replay
    #[prost(string, tag = "7")]
    pub response_nonce: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaseRequest {
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub session_token: ::prost::alloc::string::String,
    /// Resource requirements
    #[prost(message, optional, tag = "3")]
    pub requirements: ::core::option::Option<super::super::common::v1::ResourceLimits>,
    #[prost(uint64, tag = "4")]
    pub lease_duration_seconds: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutorConnectionDetails {
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub grpc_endpoint: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub gpu_spec: ::core::option::Option<super::super::common::v1::GpuSpec>,
    #[prost(message, optional, tag = "4")]
    pub available_resources: ::core::option::Option<
        super::super::common::v1::ResourceLimits,
    >,
    #[prost(string, tag = "5")]
    pub status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaseOfferResponse {
    #[prost(message, repeated, tag = "1")]
    pub available_executors: ::prost::alloc::vec::Vec<ExecutorConnectionDetails>,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionInitRequest {
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub executor_id: ::prost::alloc::string::String,
    /// verification, rental, etc.
    #[prost(string, tag = "4")]
    pub session_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionInitResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub access_credentials: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateSshSessionRequest {
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub executor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub purpose: ::prost::alloc::string::String,
    /// Required: SSH public key
    #[prost(string, tag = "4")]
    pub validator_public_key: ::prost::alloc::string::String,
    /// Required: Max session length
    #[prost(int64, tag = "5")]
    pub session_duration_secs: i64,
    /// Optional: For audit trail
    #[prost(string, tag = "6")]
    pub session_metadata: ::prost::alloc::string::String,
    /// Enable rental permissions
    #[prost(bool, tag = "7")]
    pub rental_mode: bool,
    /// Associated rental ID if rental_mode=true
    #[prost(string, tag = "8")]
    pub rental_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateSshSessionResponse {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Format: "username@host:port"
    #[prost(string, tag = "2")]
    pub access_credentials: ::prost::alloc::string::String,
    /// Unix timestamp
    #[prost(int64, tag = "3")]
    pub expires_at: i64,
    /// Confirm executor ID
    #[prost(string, tag = "4")]
    pub executor_id: ::prost::alloc::string::String,
    /// Session setup status
    #[prost(enumeration = "SshSessionStatus", tag = "5")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseSshSessionRequest {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub validator_hotkey: ::prost::alloc::string::String,
    /// For audit trail
    #[prost(string, tag = "3")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseSshSessionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSshSessionsRequest {
    #[prost(string, tag = "1")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub include_expired: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSshSessionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub sessions: ::prost::alloc::vec::Vec<SshSession>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SshSession {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub executor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub validator_hotkey: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub created_at: i64,
    #[prost(int64, tag = "5")]
    pub expires_at: i64,
    #[prost(enumeration = "SshSessionStatus", tag = "6")]
    pub status: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SshSessionStatus {
    Unknown = 0,
    Active = 1,
    Expired = 2,
    Failed = 3,
}
impl SshSessionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SshSessionStatus::Unknown => "SSH_SESSION_STATUS_UNKNOWN",
            SshSessionStatus::Active => "SSH_SESSION_STATUS_ACTIVE",
            SshSessionStatus::Expired => "SSH_SESSION_STATUS_EXPIRED",
            SshSessionStatus::Failed => "SSH_SESSION_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SSH_SESSION_STATUS_UNKNOWN" => Some(Self::Unknown),
            "SSH_SESSION_STATUS_ACTIVE" => Some(Self::Active),
            "SSH_SESSION_STATUS_EXPIRED" => Some(Self::Expired),
            "SSH_SESSION_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod miner_discovery_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// MinerDiscovery service for validator-miner interaction
    #[derive(Debug, Clone)]
    pub struct MinerDiscoveryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MinerDiscoveryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MinerDiscoveryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MinerDiscoveryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MinerDiscoveryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Authenticate validator with the miner
        pub async fn authenticate_validator(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidatorAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MinerAuthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/AuthenticateValidator",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.miner.v1.MinerDiscovery",
                        "AuthenticateValidator",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Request available executor leases from miner
        pub async fn request_executor_lease(
            &mut self,
            request: impl tonic::IntoRequest<super::LeaseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LeaseOfferResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/RequestExecutorLease",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.miner.v1.MinerDiscovery",
                        "RequestExecutorLease",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Initiate session with specific executor
        pub async fn initiate_executor_session(
            &mut self,
            request: impl tonic::IntoRequest<super::SessionInitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SessionInitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/InitiateExecutorSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.miner.v1.MinerDiscovery",
                        "InitiateExecutorSession",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SSH Session Management
        pub async fn initiate_ssh_session(
            &mut self,
            request: impl tonic::IntoRequest<super::InitiateSshSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateSshSessionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/InitiateSshSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.miner.v1.MinerDiscovery",
                        "InitiateSshSession",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn close_ssh_session(
            &mut self,
            request: impl tonic::IntoRequest<super::CloseSshSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CloseSshSessionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/CloseSshSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("basilca.miner.v1.MinerDiscovery", "CloseSshSession"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_ssh_sessions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSshSessionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSshSessionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.miner.v1.MinerDiscovery/ListSshSessions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("basilca.miner.v1.MinerDiscovery", "ListSshSessions"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod miner_discovery_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MinerDiscoveryServer.
    #[async_trait]
    pub trait MinerDiscovery: Send + Sync + 'static {
        /// Authenticate validator with the miner
        async fn authenticate_validator(
            &self,
            request: tonic::Request<super::ValidatorAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MinerAuthResponse>,
            tonic::Status,
        >;
        /// Request available executor leases from miner
        async fn request_executor_lease(
            &self,
            request: tonic::Request<super::LeaseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LeaseOfferResponse>,
            tonic::Status,
        >;
        /// Initiate session with specific executor
        async fn initiate_executor_session(
            &self,
            request: tonic::Request<super::SessionInitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SessionInitResponse>,
            tonic::Status,
        >;
        /// SSH Session Management
        async fn initiate_ssh_session(
            &self,
            request: tonic::Request<super::InitiateSshSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateSshSessionResponse>,
            tonic::Status,
        >;
        async fn close_ssh_session(
            &self,
            request: tonic::Request<super::CloseSshSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CloseSshSessionResponse>,
            tonic::Status,
        >;
        async fn list_ssh_sessions(
            &self,
            request: tonic::Request<super::ListSshSessionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSshSessionsResponse>,
            tonic::Status,
        >;
    }
    /// MinerDiscovery service for validator-miner interaction
    #[derive(Debug)]
    pub struct MinerDiscoveryServer<T: MinerDiscovery> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MinerDiscovery> MinerDiscoveryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MinerDiscoveryServer<T>
    where
        T: MinerDiscovery,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/basilca.miner.v1.MinerDiscovery/AuthenticateValidator" => {
                    #[allow(non_camel_case_types)]
                    struct AuthenticateValidatorSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::ValidatorAuthRequest>
                    for AuthenticateValidatorSvc<T> {
                        type Response = super::MinerAuthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidatorAuthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::authenticate_validator(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AuthenticateValidatorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.miner.v1.MinerDiscovery/RequestExecutorLease" => {
                    #[allow(non_camel_case_types)]
                    struct RequestExecutorLeaseSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::LeaseRequest>
                    for RequestExecutorLeaseSvc<T> {
                        type Response = super::LeaseOfferResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LeaseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::request_executor_lease(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestExecutorLeaseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.miner.v1.MinerDiscovery/InitiateExecutorSession" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateExecutorSessionSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::SessionInitRequest>
                    for InitiateExecutorSessionSvc<T> {
                        type Response = super::SessionInitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SessionInitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::initiate_executor_session(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InitiateExecutorSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.miner.v1.MinerDiscovery/InitiateSshSession" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateSshSessionSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::InitiateSshSessionRequest>
                    for InitiateSshSessionSvc<T> {
                        type Response = super::InitiateSshSessionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitiateSshSessionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::initiate_ssh_session(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InitiateSshSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.miner.v1.MinerDiscovery/CloseSshSession" => {
                    #[allow(non_camel_case_types)]
                    struct CloseSshSessionSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::CloseSshSessionRequest>
                    for CloseSshSessionSvc<T> {
                        type Response = super::CloseSshSessionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CloseSshSessionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::close_ssh_session(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CloseSshSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.miner.v1.MinerDiscovery/ListSshSessions" => {
                    #[allow(non_camel_case_types)]
                    struct ListSshSessionsSvc<T: MinerDiscovery>(pub Arc<T>);
                    impl<
                        T: MinerDiscovery,
                    > tonic::server::UnaryService<super::ListSshSessionsRequest>
                    for ListSshSessionsSvc<T> {
                        type Response = super::ListSshSessionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSshSessionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MinerDiscovery>::list_ssh_sessions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListSshSessionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MinerDiscovery> Clone for MinerDiscoveryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MinerDiscovery> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MinerDiscovery> tonic::server::NamedService for MinerDiscoveryServer<T> {
        const NAME: &'static str = "basilca.miner.v1.MinerDiscovery";
    }
}
