// Rental Protocol - Container rental operations
syntax = "proto3";

package basilica.rental.v1;

import "common.proto";

// Rental service for container deployment operations
service RentalService {
  // Start a new rental
  rpc StartRental(RentalRequest) returns (RentalResponse);

  // Get rental status
  rpc GetRentalStatus(RentalStatusRequest) returns (RentalStatusResponse);

  // Stop a rental
  rpc StopRental(StopRentalRequest) returns (StopRentalResponse);

  // Stream container logs
  rpc StreamLogs(LogStreamRequest) returns (stream LogEntry);

  // Update container state
  rpc UpdateContainerState(ContainerStateUpdate) returns (ContainerStateResponse);
}

// Request to start a new rental
message RentalRequest {
  string validator_hotkey = 1;
  string executor_id = 2;
  ContainerSpec container_spec = 3;
  int64 duration_seconds = 4;
  string ssh_public_key = 5;
  string session_token = 6;
  map<string, string> metadata = 7;
}

// Container specification
message ContainerSpec {
  string image = 1;
  map<string, string> environment = 2;
  repeated PortMapping ports = 3;
  ResourceRequirements resources = 4;
  repeated string command = 5;
  repeated VolumeMount volumes = 6;
  map<string, string> labels = 7;
  repeated string capabilities = 8;
  NetworkConfig network = 9;
}

// Port mapping configuration
message PortMapping {
  uint32 container_port = 1;
  uint32 host_port = 2;
  string protocol = 3; // tcp/udp
}

// Resource requirements
message ResourceRequirements {
  double cpu_cores = 1;
  int64 memory_mb = 2;
  int64 storage_mb = 3;
  uint32 gpu_count = 4;
  repeated string gpu_types = 5;
}

// Volume mount configuration
message VolumeMount {
  string host_path = 1;
  string container_path = 2;
  bool read_only = 3;
}

// Network configuration
message NetworkConfig {
  string mode = 1; // bridge, host, none
  repeated string dns = 2;
  map<string, string> extra_hosts = 3;
}

// Rental response
message RentalResponse {
  string rental_id = 1;
  string ssh_credentials = 2;
  ContainerInfo container_info = 3;
  basilca.common.v1.Timestamp expires_at = 4;
  basilca.common.v1.ErrorInfo error = 5;
}

// Container information
message ContainerInfo {
  string container_id = 1;
  string container_name = 2;
  repeated PortMapping mapped_ports = 3;
  string status = 4;
  map<string, string> labels = 5;
}

// Request rental status
message RentalStatusRequest {
  string rental_id = 1;
  string validator_hotkey = 2;
}

// Rental status response
message RentalStatusResponse {
  string rental_id = 1;
  RentalState state = 2;
  ContainerStatus container_status = 3;
  basilca.common.v1.Timestamp created_at = 4;
  basilca.common.v1.Timestamp expires_at = 5;
  ResourceUsage resource_usage = 6;
  basilca.common.v1.ErrorInfo error = 7;
}

// Rental state
enum RentalState {
  RENTAL_STATE_UNKNOWN = 0;
  RENTAL_STATE_PROVISIONING = 1;
  RENTAL_STATE_ACTIVE = 2;
  RENTAL_STATE_STOPPING = 3;
  RENTAL_STATE_STOPPED = 4;
  RENTAL_STATE_FAILED = 5;
  RENTAL_STATE_EXPIRED = 6;
}

// Container status
message ContainerStatus {
  string container_id = 1;
  string state = 2; // running, stopped, exited, etc.
  int32 exit_code = 3;
  string health = 4; // healthy, unhealthy, none
  basilca.common.v1.Timestamp started_at = 5;
  basilca.common.v1.Timestamp finished_at = 6;
}

// Resource usage statistics
message ResourceUsage {
  double cpu_percent = 1;
  int64 memory_mb = 2;
  int64 disk_read_bytes = 3;
  int64 disk_write_bytes = 4;
  int64 network_rx_bytes = 5;
  int64 network_tx_bytes = 6;
  repeated GpuUsage gpu_usage = 7;
}

// GPU usage statistics
message GpuUsage {
  uint32 gpu_index = 1;
  double utilization_percent = 2;
  int64 memory_mb = 3;
  double temperature_celsius = 4;
}

// Stop rental request
message StopRentalRequest {
  string rental_id = 1;
  string validator_hotkey = 2;
  string reason = 3;
  bool force = 4;
}

// Stop rental response (gRPC only - HTTP API returns 204 No Content with empty body)
message StopRentalResponse {
  bool success = 1;
  string message = 2;
  basilca.common.v1.ErrorInfo error = 3;
}

// Log stream request
message LogStreamRequest {
  string rental_id = 1;
  string validator_hotkey = 2;
  bool follow = 3;
  int32 tail_lines = 4;
  basilca.common.v1.Timestamp since = 5;
}

// Log entry
message LogEntry {
  basilca.common.v1.Timestamp timestamp = 1;
  string stream = 2; // stdout/stderr
  string message = 3;
  string container_id = 4;
}

// Container state update (from executor to miner)
message ContainerStateUpdate {
  string rental_id = 1;
  string executor_id = 2;
  ContainerStatus status = 3;
  ResourceUsage resource_usage = 4;
  string event_type = 5; // started, stopped, health_changed, etc.
}

// Container state response
message ContainerStateResponse {
  bool acknowledged = 1;
  basilca.common.v1.ErrorInfo error = 2;
}
