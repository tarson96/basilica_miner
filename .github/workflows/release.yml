name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    needs: create-release
    strategy:
      matrix:
        service: [executor, miner, validator, basilica-api]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            suffix: linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            suffix: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            suffix: macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            suffix: windows-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.service }}-${{ matrix.target }}

      # Install system dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler pkg-config libssl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf pkg-config openssl

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc
          
      # Copy veritas binaries for validator
      - name: Copy veritas binaries
        if: matrix.service == 'validator'
        run: |
          cp bin/executor-binary/executor-binary ./executor-binary
          cp bin/validator-binary/validator-binary ./validator-binary

      # Build release binary
      - name: Build ${{ matrix.service }}
        run: cargo build --release --target ${{ matrix.target }} -p ${{ matrix.service }}

      # Package binary
      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.service }} dist/
          cp README.md dist/
          if [ -f "${{ matrix.service }}.toml.example" ]; then
            cp ${{ matrix.service }}.toml.example dist/
          fi
          tar -czf basilica-${{ matrix.service }}-${{ matrix.suffix }}.tar.gz -C dist .

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\${{ matrix.service }}.exe dist\
          copy README.md dist\
          if (Test-Path "${{ matrix.service }}.toml.example") {
            copy ${{ matrix.service }}.toml.example dist\
          }
          Compress-Archive -Path dist\* -DestinationPath basilica-${{ matrix.service }}-${{ matrix.suffix }}.zip

      # Upload release assets
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            basilica-${{ matrix.service }}-${{ matrix.suffix }}.tar.gz
            basilica-${{ matrix.service }}-${{ matrix.suffix }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker-images:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [executor, miner, validator]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version tag
        id: version
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Copy veritas binaries for validator
      - name: Copy veritas binaries
        if: matrix.service == 'validator'
        run: |
          cp bin/executor-binary/executor-binary ./executor-binary
          cp bin/validator-binary/validator-binary ./validator-binary

      - name: Build Docker image
        env:
          BITTENSOR_NETWORK: finney
        run: |
          ./scripts/${{ matrix.service }}/build.sh \
            --image-name ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --image-tag ${{ steps.version.outputs.tag }}

      - name: Push Docker image
        run: |
          ./scripts/${{ matrix.service }}/push.sh \
            --source-image ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --target-image ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --tag ${{ steps.version.outputs.tag }}