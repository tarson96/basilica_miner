name: Adhoc Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use (e.g., v1.0.0, latest, dev)'
        required: true
        default: 'latest'
      services:
        description: 'Comma-separated list of services to build (executor,miner,validator) or "all"'
        required: true
        default: 'all'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.parse.outputs.services }}
    steps:
      - name: Parse services input
        id: parse
        run: |
          if [ "${{ github.event.inputs.services }}" = "all" ]; then
            echo 'services=["executor", "miner", "validator"]' >> $GITHUB_OUTPUT
          else
            # Convert comma-separated to JSON array
            services=$(echo "${{ github.event.inputs.services }}" | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "services=$services" >> $GITHUB_OUTPUT
          fi

  build-docker-images:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Copy veritas binaries for validator
      - name: Copy veritas binaries
        if: matrix.service == 'validator'
        run: |
          cp bin/executor-binary/executor-binary ./executor-binary
          cp bin/validator-binary/validator-binary ./validator-binary

      - name: Build Docker image
        env:
          BITTENSOR_NETWORK: finney
        run: |
          ./scripts/${{ matrix.service }}/build.sh \
            --image-name ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --image-tag ${{ github.event.inputs.tag }}

      - name: Push Docker image
        run: |
          ./scripts/${{ matrix.service }}/push.sh \
            --source-image ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --target-image ghcr.io/tplr-ai/basilica/${{ matrix.service }} \
            --tag ${{ github.event.inputs.tag }}