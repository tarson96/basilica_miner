---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages for Docker
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
    state: present

- name: Check if Docker is already installed
  command: docker --version
  register: docker_installed
  failed_when: false
  changed_when: false

- name: Install Docker using convenience script if not present
  shell: |
    curl -fsSL https://get.docker.com | sh
  when: docker_installed.rc != 0 and ansible_os_family == "Debian"

- name: Create docker group
  group:
    name: docker
    state: present

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  notify: restart docker

- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Configure Docker daemon
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "live-restore": true,
        "userland-proxy": false,
        "experimental": false,
        "metrics-addr": "127.0.0.1:9323",
        "default-ulimits": {
          "memlock": {
            "Hard": -1,
            "Name": "memlock",
            "Soft": -1
          },
          "nofile": {
            "Hard": 1048576,
            "Name": "nofile",
            "Soft": 1048576
          }
        }
      }
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify: restart docker

- name: Enable and start Docker service
  systemd:
    name: docker
    enabled: yes
    state: started
    daemon_reload: yes

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false

- name: Display Docker version
  debug:
    msg: "Docker version: {{ docker_version.stdout }}"

- name: Verify Docker Compose installation
  command: docker compose version
  register: compose_version
  changed_when: false

- name: Display Docker Compose version
  debug:
    msg: "Docker Compose version: {{ compose_version.stdout }}"

- name: Test Docker functionality
  command: docker run --rm hello-world
  register: docker_test
  changed_when: false
  failed_when: false

- name: Display Docker test result
  debug:
    msg: "Docker test: {{ 'SUCCESS' if docker_test.rc == 0 else 'FAILED' }}"
