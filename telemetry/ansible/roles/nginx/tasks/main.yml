---
- name: Install NGINX
  apt:
    name: nginx
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Create NGINX configuration directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop:
    - /etc/nginx/conf.d
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled

- name: Configure NGINX global settings
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: Configure NGINX for Grafana
  template:
    src: basilica-grafana.conf.j2
    dest: /etc/nginx/sites-available/basilica-grafana.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: Configure NGINX for Prometheus
  template:
    src: basilica-prometheus.conf.j2
    dest: /etc/nginx/sites-available/basilica-prometheus.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: Configure NGINX for Loki
  template:
    src: basilica-loki.conf.j2
    dest: /etc/nginx/sites-available/basilica-loki.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: Enable Grafana site
  file:
    src: /etc/nginx/sites-available/basilica-grafana.conf
    dest: /etc/nginx/sites-enabled/basilica-grafana.conf
    state: link
  notify: restart nginx

- name: Enable Prometheus site
  file:
    src: /etc/nginx/sites-available/basilica-prometheus.conf
    dest: /etc/nginx/sites-enabled/basilica-prometheus.conf
    state: link
  notify: restart nginx
  when: nginx_enable_prometheus_proxy | default(true)

- name: Enable Loki site
  file:
    src: /etc/nginx/sites-available/basilica-loki.conf
    dest: /etc/nginx/sites-enabled/basilica-loki.conf
    state: link
  notify: restart nginx
  when: nginx_enable_loki_proxy | default(true)

- name: Check if default NGINX site exists
  stat:
    path: /etc/nginx/sites-enabled/default
  register: default_site

- name: Remove default NGINX site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx
  when: default_site.stat.exists

- name: Create SSL directory if not exists
  file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: 0700
  when: nginx_ssl_enabled | default(false)

- name: Check if SSL certificate and key files already exist
  stat:
    path: "{{ item }}"
  register: ssl_cert_exists
  loop:
    - "/etc/nginx/ssl/nginx_cert.pem"
    - "/etc/nginx/ssl/nginx_key.pem"
  when: nginx_ssl_enabled | default(false)

- name: Generate self-signed SSL certificates
  block:
    - name: Generate self-signed certificates with OpenSSL
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -sha256 \
          -keyout /etc/nginx/ssl/nginx_key.pem \
          -out /etc/nginx/ssl/nginx_cert.pem \
          -subj "/C={{ nginx_cert_country | default('US') }}/ST={{ nginx_cert_state | default('State') }}/L={{ nginx_cert_locality | default('City') }}/O={{ nginx_cert_organization | default('Basilica') }}/CN={{ basilica_domain | default(ansible_host) }}"
      args:
        creates: /etc/nginx/ssl/nginx_cert.pem
      notify: restart nginx

    - name: Set proper permissions on SSL files
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0600
      loop:
        - /etc/nginx/ssl/nginx_cert.pem
        - /etc/nginx/ssl/nginx_key.pem
  when: >
    nginx_ssl_enabled | default(false) and
    (ssl_cert_exists.results[0].stat is not defined or not ssl_cert_exists.results[0].stat.exists or
     ssl_cert_exists.results[1].stat is not defined or not ssl_cert_exists.results[1].stat.exists)

- name: Ensure UFW is installed
  apt:
    name: ufw
    state: present
  when: ansible_os_family == "Debian"

- name: Allow SSH through UFW before doing anything else
  ufw:
    rule: allow
    port: "22"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Configure UFW rules for Basilica telemetry services
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "80"  # NGINX HTTP
    - "443" # NGINX HTTPS
    - "{{ grafana_port | default(3000) }}"  # Direct Grafana access
    - "{{ prometheus_port | default(9090) }}"  # Direct Prometheus access
    - "{{ loki_port | default(3100) }}"  # Direct Loki access
  when: ansible_os_family == "Debian"

- name: Enable UFW with caution
  block:
    - name: Check if UFW is already enabled
      command: ufw status
      register: ufw_status
      changed_when: false

    - name: Enable UFW if not already enabled
      ufw:
        state: enabled
        policy: deny
      when: "'Status: active' not in ufw_status.stdout"
  when: ansible_os_family == "Debian"

- name: Start and enable NGINX
  service:
    name: nginx
    state: started
    enabled: yes

- name: Test NGINX configuration
  shell: nginx -t
  register: nginx_test
  changed_when: false

- name: Display NGINX configuration test results
  debug:
    var: nginx_test.stdout_lines

- name: Check NGINX status
  shell: |
    systemctl status nginx || echo "NGINX service issue"
    netstat -tulpn | grep 80 || echo "NGINX not listening on port 80"
  register: nginx_debug
  changed_when: false

- name: Display NGINX debug info
  debug:
    var: nginx_debug.stdout_lines

- name: Create certificate rotation script
  template:
    src: rotate_ssl_cert.sh.j2
    dest: /usr/local/bin/rotate_ssl_cert.sh
    owner: root
    group: root
    mode: 0700
  when: nginx_ssl_enabled | default(false) and nginx_auto_rotate_cert | default(true)

- name: Create cron job for yearly certificate rotation
  cron:
    name: "Rotate self-signed SSL certificates annually"
    special_time: yearly
    job: "/usr/local/bin/rotate_ssl_cert.sh"
    user: root
  when: nginx_ssl_enabled | default(false) and nginx_auto_rotate_cert | default(true)
