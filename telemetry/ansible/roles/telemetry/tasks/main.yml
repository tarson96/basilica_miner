---
- name: Create Basilica telemetry directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  loop:
    - "{{ basilica_telemetry_dir }}"
    - "{{ basilica_telemetry_dir }}/grafana"
    - "{{ basilica_telemetry_dir }}/grafana/dashboards"
    - "{{ basilica_telemetry_dir }}/grafana/provisioning"
    - "{{ basilica_telemetry_dir }}/grafana/provisioning/datasources"
    - "{{ basilica_telemetry_dir }}/grafana/provisioning/dashboards"
    - "{{ basilica_telemetry_dir }}/rules"
    - "{{ basilica_log_dir | default('/var/log/basilica') }}"

- name: Copy Prometheus configuration
  copy:
    src: "{{ playbook_dir }}/../prometheus.yml"
    dest: "{{ basilica_telemetry_dir }}/prometheus.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry

- name: Copy Loki configuration
  copy:
    src: "{{ playbook_dir }}/../loki.yml"
    dest: "{{ basilica_telemetry_dir }}/loki.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry


- name: Copy Alertmanager configuration
  copy:
    src: "{{ playbook_dir }}/../alertmanager.yml"
    dest: "{{ basilica_telemetry_dir }}/alertmanager.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry

- name: Copy Grafana configuration
  copy:
    src: "{{ playbook_dir }}/../grafana/"
    dest: "{{ basilica_telemetry_dir }}/grafana/"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry

- name: Copy Prometheus alerting rules
  copy:
    src: "{{ playbook_dir }}/../rules/"
    dest: "{{ basilica_telemetry_dir }}/rules/"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry

- name: Generate Docker Compose configuration
  template:
    src: docker-compose.prod.yml.j2
    dest: "{{ basilica_telemetry_dir }}/docker-compose.prod.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  notify: restart basilica telemetry

- name: Check if Basilica network exists
  shell: docker network ls | grep {{ basilica_network_name | default('basilica_network') }}
  register: network_check
  failed_when: false
  changed_when: false
  when: basilica_network_external | default(true)

- name: Create Basilica network if it doesn't exist
  command: docker network create {{ basilica_network_name | default('basilica_network') }}
  when:
    - basilica_network_external | default(true)
    - network_check.rc != 0

- name: Stop existing Basilica telemetry stack
  shell: docker compose -f {{ basilica_telemetry_dir }}/docker-compose.prod.yml down
  args:
    chdir: "{{ basilica_telemetry_dir }}"
  ignore_errors: true
  when: basilica_force_recreate | default(false)

- name: Start Basilica telemetry stack
  shell: docker compose -f {{ basilica_telemetry_dir }}/docker-compose.prod.yml up -d
  args:
    chdir: "{{ basilica_telemetry_dir }}"
  register: docker_compose_result

- name: Display Docker Compose result
  debug:
    var: docker_compose_result.stdout_lines

- name: Wait for services to be ready
  wait_for:
    host: localhost
    port: "{{ item }}"
    delay: 10
    timeout: 120
  loop:
    - "{{ prometheus_port | default(9090) }}"
    - "{{ loki_port | default(3100) }}"
    - "{{ grafana_port | default(3000) }}"
    - "{{ node_exporter_port | default(9100) }}"
    - "{{ alertmanager_port | default(9093) }}"

- name: Verify service health
  uri:
    url: "{{ item.url }}"
    method: GET
    status_code: 200
  register: health_checks
  ignore_errors: true
  loop:
    - { name: "Prometheus", url: "http://localhost:{{ prometheus_port | default(9090) }}/-/healthy" }
    - { name: "Loki", url: "http://localhost:{{ loki_port | default(3100) }}/ready" }
    - { name: "Grafana", url: "http://localhost:{{ grafana_port | default(3000) }}/api/health" }
    - { name: "Node Exporter", url: "http://localhost:{{ node_exporter_port | default(9100) }}/metrics" }
    - { name: "Alertmanager", url: "http://localhost:{{ alertmanager_port | default(9093) }}/-/healthy" }

- name: Display health check results
  debug:
    msg: "{{ item.item.name }}: {{ 'HEALTHY' if item.status == 200 else 'UNHEALTHY' }}"
  loop: "{{ health_checks.results }}"

- name: Get running containers
  shell: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  register: running_containers
  changed_when: false

- name: Display running containers
  debug:
    var: running_containers.stdout_lines
