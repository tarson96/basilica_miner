---
# Main playbook for Basilica telemetry deployment
- name: Deploy Basilica Telemetry Stack
  hosts: all
  become: true
  vars_files:
    - group_vars/all.yml
    - group_vars/vault.yml

  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install basic system packages
      apt:
        name:
          - curl
          - wget
          - unzip
          - git
          - htop
          - net-tools
          - ufw
        state: present
      when: ansible_os_family == "Debian"

  roles:
    - role: docker
      tags: [docker, infrastructure]

    - role: telemetry
      tags: [telemetry, services]

    - role: nginx
      tags: [nginx, proxy]
      when: nginx_enabled | default(true)

  post_tasks:
    - name: Wait for all services to be ready
      wait_for:
        host: localhost
        port: "{{ item }}"
        delay: 10
        timeout: 180
      loop:
        - "{{ prometheus_port | default(9090) }}"
        - "{{ loki_port | default(3100) }}"
        - "{{ grafana_port | default(3000) }}"
        - "{{ node_exporter_port | default(9100) }}"
        - "{{ alertmanager_port | default(9093) }}"

    - name: Comprehensive health check of all services
      uri:
        url: "{{ item.url }}"
        method: GET
        status_code: 200
      register: comprehensive_health_checks
      ignore_errors: true
      loop:
        - { name: "Prometheus", url: "http://localhost:{{ prometheus_port | default(9090) }}/-/healthy" }
        - { name: "Loki", url: "http://localhost:{{ loki_port | default(3100) }}/ready" }
        - { name: "Grafana", url: "http://localhost:{{ grafana_port | default(3000) }}/api/health" }
        - { name: "Node Exporter", url: "http://localhost:{{ node_exporter_port | default(9100) }}/metrics" }
        - { name: "Alertmanager", url: "http://localhost:{{ alertmanager_port | default(9093) }}/-/healthy" }

    - name: Display comprehensive health check results
      debug:
        msg: "{{ item.item.name }}: {{ 'HEALTHY ✓' if item.status == 200 else 'UNHEALTHY ✗' }}"
      loop: "{{ comprehensive_health_checks.results }}"

    - name: Verify NGINX is correctly proxying services
      uri:
        url: "{{ item.url }}"
        method: GET
        status_code: 200
        timeout: 30
      register: nginx_proxy_checks
      ignore_errors: true
      loop:
        - { name: "Grafana via NGINX", url: "http://localhost/api/health" }
        - { name: "Prometheus via NGINX", url: "http://localhost:8080/api/v1/status/config" }
        - { name: "Loki via NGINX", url: "http://localhost:8081/ready" }
      when: nginx_enabled | default(true)

    - name: Display NGINX proxy status
      debug:
        msg: "{{ item.item.name }}: {{ 'WORKING ✓' if item.status == 200 else 'NOT WORKING ✗' }}"
      loop: "{{ nginx_proxy_checks.results }}"
      when: nginx_enabled | default(true) and nginx_proxy_checks is defined

    - name: Test Grafana datasource connectivity
      uri:
        url: "http://localhost:{{ grafana_port | default(3000) }}/api/datasources"
        method: GET
        user: "admin"
        password: "{{ grafana_admin_password | default('basilica_admin') }}"
        force_basic_auth: yes
        status_code: 200
      register: datasources_check
      ignore_errors: true
      when: not ansible_check_mode

    - name: Display Grafana datasource status
      debug:
        msg: "Grafana datasources: {{ 'CONFIGURED ✓' if datasources_check.status == 200 else 'ISSUE ✗' }}"
      when: not ansible_check_mode and datasources_check is defined

    - name: Verify Docker containers are running
      shell: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep basilica
      register: running_containers
      changed_when: false

    - name: Display running Basilica containers
      debug:
        var: running_containers.stdout_lines

    - name: Check Docker network status
      shell: docker network ls | grep {{ basilica_network_name | default('basilica_network') }}
      register: network_status
      changed_when: false
      failed_when: false

    - name: Display Docker network status
      debug:
        msg: "Basilica network: {{ 'EXISTS ✓' if network_status.rc == 0 else 'NOT FOUND ✗' }}"

